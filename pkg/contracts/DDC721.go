// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DDC721MetaData contains all meta data concerning the DDC721 contract.
var DDC721MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"EnterBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ExitBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetNameAndSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ddcURI\",\"type\":\"string\"}],\"name\":\"SetURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ddcURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ddcURI_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ddcURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityProxyAddress\",\"type\":\"address\"}],\"name\":\"setAuthorityProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargeProxyAddress\",\"type\":\"address\"}],\"name\":\"setChargeProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ddcURI_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b50608051612bb46200010060003960008181610880015281816108c001528181610a710152610ab10152612bb46000f3fe60806040526004361061019c5760003560e01c8063715018a6116100ec578063c5837d821161008a578063d7a78db811610064578063d7a78db814610490578063e985e9c5146104b0578063f2fde38b146104d0578063f6dda936146104f057600080fd5b8063c5837d8214610430578063d0def52114610450578063d302b0dc1461047057600080fd5b80638da5cb5b116100c65780638da5cb5b146103bd57806395d89b41146103db578063a22cb465146103f0578063b88d4fde1461041057600080fd5b8063715018a6146103735780638129fc1c14610388578063862440e21461039d57600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef286146102f25780635a446215146103055780636352211e1461032557806370a082311461034557600080fd5b80633659cfe61461029257806342966c68146102b257806344d891df146102d257600080fd5b806301ffc9a7146101a157806306fdde03146101d6578063081812fc146101f8578063095ea7b31461023057806323b872dd14610252578063293ec97c14610272575b600080fd5b3480156101ad57600080fd5b506101c16101bc36600461239d565b610510565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101eb610547565b6040516101cd9190612412565b34801561020457600080fd5b50610218610213366004612425565b6105d9565b6040516001600160a01b0390911681526020016101cd565b34801561023c57600080fd5b5061025061024b36600461245a565b610600565b005b34801561025e57600080fd5b5061025061026d366004612484565b610783565b34801561027e57600080fd5b506101eb61028d366004612425565b6107cb565b34801561029e57600080fd5b506102506102ad3660046124c0565b610875565b3480156102be57600080fd5b506102506102cd366004612425565b61093e565b3480156102de57600080fd5b506102506102ed3660046124c0565b610a10565b61025061030036600461257e565b610a66565b34801561031157600080fd5b506102506103203660046125cc565b610b20565b34801561033157600080fd5b50610218610340366004612425565b610bb1565b34801561035157600080fd5b506103656103603660046124c0565b610c25565b6040519081526020016101cd565b34801561037f57600080fd5b50610250610cab565b34801561039457600080fd5b50610250610ce1565b3480156103a957600080fd5b506102506103b8366004612626565b610d64565b3480156103c957600080fd5b506033546001600160a01b0316610218565b3480156103e757600080fd5b506101eb610e94565b3480156103fc57600080fd5b5061025061040b366004612665565b610ea3565b34801561041c57600080fd5b5061025061042b36600461269c565b610f83565b34801561043c57600080fd5b5061025061044b3660046124c0565b610ff2565b34801561045c57600080fd5b5061025061046b36600461257e565b611048565b34801561047c57600080fd5b5061025061048b366004612425565b611081565b34801561049c57600080fd5b506102506104ab366004612425565b6110f7565b3480156104bc57600080fd5b506101c16104cb366004612704565b61116b565b3480156104dc57600080fd5b506102506104eb3660046124c0565b6111d9565b3480156104fc57600080fd5b5061025061050b366004612737565b611271565b60006001600160e01b0319821663114e0e5360e21b148061054157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fb8054610556906127ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610582906127ab565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b60006105e4826112b8565b50600090815260ff60205260409020546001600160a01b031690565b610608611315565b610611826113e8565b61061a816114c9565b610625335b83611528565b600061063082610bb1565b9050806001600160a01b0316836001600160a01b031614156106995760405162461bcd60e51b815260206004820181905260248201527f4444433732313a617070726f76616c20746f2063757272656e74206f776e657260448201526064015b60405180910390fd5b336001600160a01b03821614806106b557506106b5813361116b565b6107275760405162461bcd60e51b815260206004820152603760248201527f4444433732313a617070726f76652063616c6c6572206973206e6f74206f776e60448201527f6572206e6f7220617070726f76656420666f7220616c6c0000000000000000006064820152608401610690565b600082815260ff602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61078b611315565b610794836113e8565b61079d826113e8565b6107a6816114c9565b6107b0838361157e565b6107bb335b82611600565b6107c68383836116a2565b505050565b60606107d6826112b8565b60008281526101016020526040902080546107f0906127ab565b80601f016020809104026020016040519081016040528092919081815260200182805461081c906127ab565b80156108695780601f1061083e57610100808354040283529160200191610869565b820191906000526020600020905b81548152906001019060200180831161084c57829003601f168201915b50505050509050919050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108be5760405162461bcd60e51b8152600401610690906127e6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108f0611808565b6001600160a01b0316146109165760405162461bcd60e51b815260040161069090612832565b61091f81611836565b6040805160008082526020820190925261093b91839190611860565b50565b610946611315565b61094f816112b8565b610958336107b5565b600061096382610bb1565b600083815260ff6020526040902080546001600160a01b031916905590506001600160a01b038116600090815260fe602052604081208054600192906109aa908490612894565b9091555050600082815260fd6020526040902080546001600160a01b03191690556109d4826119ab565b60405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6033546001600160a01b03163314610a3a5760405162461bcd60e51b8152600401610690906128ab565b610a4381611a27565b61010480546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610aaf5760405162461bcd60e51b8152600401610690906127e6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ae1611808565b6001600160a01b031614610b075760405162461bcd60e51b815260040161069090612832565b610b1082611836565b610b1c82826001611860565b5050565b6033546001600160a01b03163314610b4a5760405162461bcd60e51b8152600401610690906128ab565b8151610b5d9060fb9060208501906122ee565b508051610b719060fc9060208401906122ee565b507fd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b60fb60fc604051610ba5929190612980565b60405180910390a15050565b600081815260fd60205260408120546001600160a01b0316806105415760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6f776e657220717565727920666f72206e6f6e6578697374656044820152656e742064646360d01b6064820152608401610690565b60006001600160a01b038216610c8f5760405162461bcd60e51b815260206004820152602960248201527f4444433732313a62616c616e636520717565727920666f7220746865207a65726044820152686f206164647265737360b81b6064820152608401610690565b506001600160a01b0316600090815260fe602052604090205490565b6033546001600160a01b03163314610cd55760405162461bcd60e51b8152600401610690906128ab565b610cdf6000611a9c565b565b600054610100900460ff1680610cfa575060005460ff16155b610d165760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff16158015610d38576000805461ffff19166101011790555b610d40611aee565b610d48611b4d565b610d50611bb4565b801561093b576000805461ff001916905550565b610d6c611315565b610d75826114c9565b610d80335b83611600565b8051610dce5760405162461bcd60e51b815260206004820152601760248201527f4444433732313a43616e206e6f7420626520656d7074790000000000000000006044820152606401610690565b6000828152610101602052604090208054610de8906127ab565b159050610e375760405162461bcd60e51b815260206004820152601a60248201527f4444433732313a616c726561647920696e697469616c697a65640000000000006044820152606401610690565b6000828152610101602090815260409091208251610e57928401906122ee565b50817fee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e4682604051610e889190612412565b60405180910390a25050565b606060fc8054610556906127ab565b610eab611315565b610eb4826113e8565b610ebd3361061f565b6001600160a01b038216331415610f165760405162461bcd60e51b815260206004820152601860248201527f4444433732313a617070726f766520746f2063616c6c657200000000000000006044820152606401610690565b336000818152610100602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610f8b611315565b610f94846113e8565b610f9d836113e8565b610fa6826114c9565b610fb0848461157e565b610fb933610d7a565b610fc48484846116a2565b610fd084848484611c13565b610fec5760405162461bcd60e51b8152600401610690906129f3565b50505050565b6033546001600160a01b0316331461101c5760405162461bcd60e51b8152600401610690906128ab565b61102581611a27565b61010580546001600160a01b0319166001600160a01b0392909216919091179055565b611050611315565b611059826113e8565b6110623361061f565b60006101035460016110749190612a44565b90506107c6838284611d12565b611089611315565b611091611e2a565b61109a81611ef8565b600081815261010260205260409020805460ff19169055336001600160a01b03167faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f826040516110ec91815260200190565b60405180910390a250565b6110ff611315565b611107611e2a565b611110816114c9565b600081815261010260205260409020805460ff191660011790556111313390565b6001600160a01b03167f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36826040516110ec91815260200190565b60006001600160a01b0383161580159061118d57506001600160a01b03821615155b6111a95760405162461bcd60e51b815260040161069090612a5c565b506001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b6033546001600160a01b031633146112035760405162461bcd60e51b8152600401610690906128ab565b6001600160a01b0381166112685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610690565b61093b81611a9c565b611279611315565b611282836113e8565b61128c3384611528565b600061010354600161129e9190612a44565b90506112ab848285611d12565b610fd06000858385611c13565b600081815260fd60205260409020546001600160a01b031661093b5760405162461bcd60e51b81526020600482015260166024820152754444433732313a6e6f6e6578697374656e742064646360501b6044820152606401610690565b610105546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af1158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190612a89565b610cdf5760405162461bcd60e51b81526020600482015260146024820152732222219b99189d3737903832b936b4b9b9b4b7b760611b6044820152606401610690565b6001600160a01b03811661140e5760405162461bcd60e51b815260040161069090612a5c565b610105546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147d9190612a89565b61093b5760405162461bcd60e51b815260206004820152601e60248201527f4444433732313a6e6f74206120617661696c61626c65206163636f756e7400006044820152606401610690565b6114d2816112b8565b6000818152610102602052604090205460ff161561093b5760405162461bcd60e51b81526020600482015260136024820152724444433732313a64697361626c65642064646360681b6044820152606401610690565b6115328282611f60565b610b1c5760405162461bcd60e51b815260206004820181905260248201527f4444433732313a6f6e6c79206f6e207468652073616d6520706c6174666f726d6044820152606401610690565b6115888282611f60565b8061159857506115988282611fe0565b610b1c5760405162461bcd60e51b815260206004820152603360248201527f4444433732313a4f6e6c79206f6e6520706c6174666f726d206f722063726f736044820152721ccb5c1b185d199bdc9b48185c1c1c9bdd985b606a1b6064820152608401610690565b600061160b82610bb1565b9050806001600160a01b0316836001600160a01b031614806116465750826001600160a01b031661163b836105d9565b6001600160a01b0316145b806116565750611656818461116b565b6107c65760405162461bcd60e51b815260206004820152601d60248201527f4444433732313a6e6f74206f776e6572206e6f7220617070726f7665640000006044820152606401610690565b826001600160a01b03166116b582610bb1565b6001600160a01b03161461171a5760405162461bcd60e51b815260206004820152602660248201527f4444433732313a7472616e73666572206f66206464632074686174206973206e60448201526537ba1037bbb760d11b6064820152608401610690565b600081815260ff6020526040902080546001600160a01b03191690556001600160a01b038316600090815260fe6020526040812080546001929061175f908490612894565b90915550506001600160a01b038216600090815260fe6020526040812080546001929061178d908490612a44565b9091555050600081815260fd6020526040902080546001600160a01b0319166001600160a01b0384161790556117c2816119ab565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b0316331461093b5760405162461bcd60e51b8152600401610690906128ab565b600061186a611808565b90506118758461201b565b6000835111806118825750815b156118935761189184846120c0565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166119a457805460ff191660011781556040516001600160a01b038316602482015261191290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526120c0565b50805460ff19168155611923611808565b6001600160a01b0316826001600160a01b03161461199b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610690565b6119a4856121ab565b5050505050565b610104546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b158015611a1357600080fd5b505af11580156119a4573d6000803e3d6000fd5b6001600160a01b038116611a4d5760405162461bcd60e51b815260040161069090612a5c565b6001600160a01b0381163b61093b5760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e9b9bdd08184818dbdb9d1c9858dd605a1b6044820152606401610690565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611b07575060005460ff16155b611b235760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff16158015611b45576000805461ffff19166101011790555b610d506121eb565b600054610100900460ff1680611b66575060005460ff16155b611b825760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff16158015611ba4576000805461ffff19166101011790555b611bac6121eb565b610d50612255565b600054610100900460ff1680611bcd575060005460ff16155b611be95760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff16158015611c0b576000805461ffff19166101011790555b611b456121eb565b60006001600160a01b0384163b15611d0657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611c57903390899088908890600401612aa6565b6020604051808303816000875af1925050508015611c92575060408051601f3d908101601f19168201909252611c8f91810190612ae3565b60015b611cec573d808015611cc0576040519150601f19603f3d011682016040523d82523d6000602084013e611cc5565b606091505b508051611ce45760405162461bcd60e51b8152600401610690906129f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d0a565b5060015b949350505050565b600082815260fd60205260409020546001600160a01b031615611d6f5760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e985b1c9958591e481b5a5b9d1959605a1b6044820152606401610690565b6001600160a01b038316600090815260fe60205260408120805460019290611d98908490612a44565b9091555050600082815260fd6020908152604080832080546001600160a01b0319166001600160a01b03881617905561010182529091208251611ddd928401906122ee565b50610103829055611ded826119ab565b60405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b610105546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b8152600401611e5c929190612b00565b602060405180830381865afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d9190612a89565b610cdf5760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6e6f742061206f70657261746f7220726f6c65206f722064696044820152651cd8589b195960d21b6064820152608401610690565b611f01816112b8565b6000818152610102602052604090205460ff1661093b5760405162461bcd60e51b815260206004820152601760248201527f4444433732313a6e6f6e2d64697361626c6564206464630000000000000000006044820152606401610690565b61010554604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190612a89565b9392505050565b6101055460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401611f98565b803b61207f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610690565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61211f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610690565b600080846001600160a01b03168460405161213a9190612b3b565b600060405180830381855af49150503d8060008114612175576040519150601f19603f3d011682016040523d82523d6000602084013e61217a565b606091505b50915091506121a28282604051806060016040528060278152602001612b58602791396122b5565b95945050505050565b6121b48161201b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612204575060005460ff16155b6122205760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff16158015610d50576000805461ffff1916610101179055801561093b576000805461ff001916905550565b600054610100900460ff168061226e575060005460ff16155b61228a5760405162461bcd60e51b8152600401610690906129a5565b600054610100900460ff161580156122ac576000805461ffff19166101011790555b610d5033611a9c565b606083156122c4575081611fd9565b8251156122d45782518084602001fd5b8160405162461bcd60e51b81526004016106909190612412565b8280546122fa906127ab565b90600052602060002090601f01602090048101928261231c5760008555612362565b82601f1061233557805160ff1916838001178555612362565b82800160010185558215612362579182015b82811115612362578251825591602001919060010190612347565b5061236e929150612372565b5090565b5b8082111561236e5760008155600101612373565b6001600160e01b03198116811461093b57600080fd5b6000602082840312156123af57600080fd5b8135611fd981612387565b60005b838110156123d55781810151838201526020016123bd565b83811115610fec5750506000910152565b600081518084526123fe8160208601602086016123ba565b601f01601f19169290920160200192915050565b602081526000611fd960208301846123e6565b60006020828403121561243757600080fd5b5035919050565b80356001600160a01b038116811461245557600080fd5b919050565b6000806040838503121561246d57600080fd5b6124768361243e565b946020939093013593505050565b60008060006060848603121561249957600080fd5b6124a28461243e565b92506124b06020850161243e565b9150604084013590509250925092565b6000602082840312156124d257600080fd5b611fd98261243e565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261250257600080fd5b813567ffffffffffffffff8082111561251d5761251d6124db565b604051601f8301601f19908116603f01168101908282118183101715612545576125456124db565b8160405283815286602085880101111561255e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561259157600080fd5b61259a8361243e565b9150602083013567ffffffffffffffff8111156125b657600080fd5b6125c2858286016124f1565b9150509250929050565b600080604083850312156125df57600080fd5b823567ffffffffffffffff808211156125f757600080fd5b612603868387016124f1565b9350602085013591508082111561261957600080fd5b506125c2858286016124f1565b6000806040838503121561263957600080fd5b82359150602083013567ffffffffffffffff8111156125b657600080fd5b801515811461093b57600080fd5b6000806040838503121561267857600080fd5b6126818361243e565b9150602083013561269181612657565b809150509250929050565b600080600080608085870312156126b257600080fd5b6126bb8561243e565b93506126c96020860161243e565b925060408501359150606085013567ffffffffffffffff8111156126ec57600080fd5b6126f8878288016124f1565b91505092959194509250565b6000806040838503121561271757600080fd5b6127208361243e565b915061272e6020840161243e565b90509250929050565b60008060006060848603121561274c57600080fd5b6127558461243e565b9250602084013567ffffffffffffffff8082111561277257600080fd5b61277e878388016124f1565b9350604086013591508082111561279457600080fd5b506127a1868287016124f1565b9150509250925092565b600181811c908216806127bf57607f821691505b602082108114156127e057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156128a6576128a661287e565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8054600090600181811c90808316806128fa57607f831692505b602080841082141561291c57634e487b7160e01b600052602260045260246000fd5b83885260208801828015612937576001811461294857612973565b60ff19871682528282019750612973565b60008981526020902060005b8781101561296d57815484820152908601908401612954565b83019850505b5050505050505092915050565b60408152600061299360408301856128e0565b82810360208401526121a281856128e0565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4444433732313a7472616e7366657220746f206e6f6e2045524337323152656360408201527032b4bb32b91034b6b83632b6b2b73a32b960791b606082015260800190565b60008219821115612a5757612a5761287e565b500190565b6020808252601390820152724444433732313a7a65726f206164647265737360681b604082015260600190565b600060208284031215612a9b57600080fd5b8151611fd981612657565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ad9908301846123e6565b9695505050505050565b600060208284031215612af557600080fd5b8151611fd981612387565b6001600160a01b03831681526040810160038310612b2e57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60008251612b4d8184602087016123ba565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209e3ecec3d5693c9c3a63566b5cb60ee1a9a0dc8c86cdb9bff7e28389088ecf4964736f6c634300080c0033",
}

// DDC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use DDC721MetaData.ABI instead.
var DDC721ABI = DDC721MetaData.ABI

// DDC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DDC721MetaData.Bin instead.
var DDC721Bin = DDC721MetaData.Bin

// DeployDDC721 deploys a new Ethereum contract, binding an instance of DDC721 to it.
func DeployDDC721(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DDC721, error) {
	parsed, err := DDC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DDC721Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DDC721{DDC721Caller: DDC721Caller{contract: contract}, DDC721Transactor: DDC721Transactor{contract: contract}, DDC721Filterer: DDC721Filterer{contract: contract}}, nil
}

// DDC721 is an auto generated Go binding around an Ethereum contract.
type DDC721 struct {
	DDC721Caller     // Read-only binding to the contract
	DDC721Transactor // Write-only binding to the contract
	DDC721Filterer   // Log filterer for contract events
}

// DDC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type DDC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type DDC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DDC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DDC721Session struct {
	Contract     *DDC721           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DDC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DDC721CallerSession struct {
	Contract *DDC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DDC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DDC721TransactorSession struct {
	Contract     *DDC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DDC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type DDC721Raw struct {
	Contract *DDC721 // Generic contract binding to access the raw methods on
}

// DDC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DDC721CallerRaw struct {
	Contract *DDC721Caller // Generic read-only contract binding to access the raw methods on
}

// DDC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DDC721TransactorRaw struct {
	Contract *DDC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewDDC721 creates a new instance of DDC721, bound to a specific deployed contract.
func NewDDC721(address common.Address, backend bind.ContractBackend) (*DDC721, error) {
	contract, err := bindDDC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DDC721{DDC721Caller: DDC721Caller{contract: contract}, DDC721Transactor: DDC721Transactor{contract: contract}, DDC721Filterer: DDC721Filterer{contract: contract}}, nil
}

// NewDDC721Caller creates a new read-only instance of DDC721, bound to a specific deployed contract.
func NewDDC721Caller(address common.Address, caller bind.ContractCaller) (*DDC721Caller, error) {
	contract, err := bindDDC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DDC721Caller{contract: contract}, nil
}

// NewDDC721Transactor creates a new write-only instance of DDC721, bound to a specific deployed contract.
func NewDDC721Transactor(address common.Address, transactor bind.ContractTransactor) (*DDC721Transactor, error) {
	contract, err := bindDDC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DDC721Transactor{contract: contract}, nil
}

// NewDDC721Filterer creates a new log filterer instance of DDC721, bound to a specific deployed contract.
func NewDDC721Filterer(address common.Address, filterer bind.ContractFilterer) (*DDC721Filterer, error) {
	contract, err := bindDDC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DDC721Filterer{contract: contract}, nil
}

// bindDDC721 binds a generic wrapper to an already deployed contract.
func bindDDC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DDC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC721 *DDC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC721.Contract.DDC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC721 *DDC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.Contract.DDC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC721 *DDC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC721.Contract.DDC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC721 *DDC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC721 *DDC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC721 *DDC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DDC721.Contract.BalanceOf(&_DDC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DDC721.Contract.BalanceOf(&_DDC721.CallOpts, owner)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721Caller) DdcURI(opts *bind.CallOpts, ddcId *big.Int) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "ddcURI", ddcId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721Session) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC721.Contract.DdcURI(&_DDC721.CallOpts, ddcId)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721CallerSession) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC721.Contract.DdcURI(&_DDC721.CallOpts, ddcId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Caller) GetApproved(opts *bind.CallOpts, ddcId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "getApproved", ddcId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Session) GetApproved(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.GetApproved(&_DDC721.CallOpts, ddcId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721CallerSession) GetApproved(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.GetApproved(&_DDC721.CallOpts, ddcId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC721.Contract.IsApprovedForAll(&_DDC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC721.Contract.IsApprovedForAll(&_DDC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721Session) Name() (string, error) {
	return _DDC721.Contract.Name(&_DDC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721CallerSession) Name() (string, error) {
	return _DDC721.Contract.Name(&_DDC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721Session) Owner() (common.Address, error) {
	return _DDC721.Contract.Owner(&_DDC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721CallerSession) Owner() (common.Address, error) {
	return _DDC721.Contract.Owner(&_DDC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Caller) OwnerOf(opts *bind.CallOpts, ddcId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "ownerOf", ddcId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Session) OwnerOf(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.OwnerOf(&_DDC721.CallOpts, ddcId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721CallerSession) OwnerOf(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.OwnerOf(&_DDC721.CallOpts, ddcId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC721.Contract.SupportsInterface(&_DDC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC721.Contract.SupportsInterface(&_DDC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721Session) Symbol() (string, error) {
	return _DDC721.Contract.Symbol(&_DDC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721CallerSession) Symbol() (string, error) {
	return _DDC721.Contract.Symbol(&_DDC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "approve", to, ddcId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Approve(to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Approve(&_DDC721.TransactOpts, to, ddcId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Approve(to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Approve(&_DDC721.TransactOpts, to, ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Burn(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "burn", ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Burn(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Burn(&_DDC721.TransactOpts, ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Burn(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Burn(&_DDC721.TransactOpts, ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Freeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "freeze", ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Freeze(&_DDC721.TransactOpts, ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Freeze(&_DDC721.TransactOpts, ddcId)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721Transactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721Session) Initialize() (*types.Transaction, error) {
	return _DDC721.Contract.Initialize(&_DDC721.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721TransactorSession) Initialize() (*types.Transaction, error) {
	return _DDC721.Contract.Initialize(&_DDC721.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string ddcURI_) returns()
func (_DDC721 *DDC721Transactor) Mint(opts *bind.TransactOpts, to common.Address, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "mint", to, ddcURI_)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string ddcURI_) returns()
func (_DDC721 *DDC721Session) Mint(to common.Address, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.Mint(&_DDC721.TransactOpts, to, ddcURI_)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string ddcURI_) returns()
func (_DDC721 *DDC721TransactorSession) Mint(to common.Address, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.Mint(&_DDC721.TransactOpts, to, ddcURI_)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721Session) RenounceOwnership() (*types.Transaction, error) {
	return _DDC721.Contract.RenounceOwnership(&_DDC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _DDC721.Contract.RenounceOwnership(&_DDC721.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeMint", to, _ddcURI, _data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721Session) SafeMint(to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMint(&_DDC721.TransactOpts, to, _ddcURI, _data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721TransactorSession) SafeMint(to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMint(&_DDC721.TransactOpts, to, _ddcURI, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeTransferFrom", from, to, ddcId, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721Session) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeTransferFrom(&_DDC721.TransactOpts, from, to, ddcId, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeTransferFrom(&_DDC721.TransactOpts, from, to, ddcId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.Contract.SetApprovalForAll(&_DDC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.Contract.SetApprovalForAll(&_DDC721.TransactOpts, operator, approved)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721Transactor) SetAuthorityProxyAddress(opts *bind.TransactOpts, authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setAuthorityProxyAddress", authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721Session) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetAuthorityProxyAddress(&_DDC721.TransactOpts, authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721TransactorSession) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetAuthorityProxyAddress(&_DDC721.TransactOpts, authorityProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721Transactor) SetChargeProxyAddress(opts *bind.TransactOpts, chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setChargeProxyAddress", chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721Session) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetChargeProxyAddress(&_DDC721.TransactOpts, chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721TransactorSession) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetChargeProxyAddress(&_DDC721.TransactOpts, chargeProxyAddress)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721Transactor) SetNameAndSymbol(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setNameAndSymbol", name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721Session) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetNameAndSymbol(&_DDC721.TransactOpts, name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721TransactorSession) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetNameAndSymbol(&_DDC721.TransactOpts, name_, symbol_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721Transactor) SetURI(opts *bind.TransactOpts, ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setURI", ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721Session) SetURI(ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetURI(&_DDC721.TransactOpts, ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721TransactorSession) SetURI(ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetURI(&_DDC721.TransactOpts, ddcId, ddcURI_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "transferFrom", from, to, ddcId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Session) TransferFrom(from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.TransferFrom(&_DDC721.TransactOpts, from, to, ddcId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) TransferFrom(from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.TransferFrom(&_DDC721.TransactOpts, from, to, ddcId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.TransferOwnership(&_DDC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.TransferOwnership(&_DDC721.TransactOpts, newOwner)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) UnFreeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "unFreeze", ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.UnFreeze(&_DDC721.TransactOpts, ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.UnFreeze(&_DDC721.TransactOpts, ddcId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721Transactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721Session) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeTo(&_DDC721.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721TransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeTo(&_DDC721.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721Transactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721Session) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeToAndCall(&_DDC721.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721TransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeToAndCall(&_DDC721.TransactOpts, newImplementation, data)
}

// DDC721AdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the DDC721 contract.
type DDC721AdminChangedIterator struct {
	Event *DDC721AdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721AdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721AdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721AdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721AdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721AdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721AdminChanged represents a AdminChanged event raised by the DDC721 contract.
type DDC721AdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) FilterAdminChanged(opts *bind.FilterOpts) (*DDC721AdminChangedIterator, error) {

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &DDC721AdminChangedIterator{contract: _DDC721.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *DDC721AdminChanged) (event.Subscription, error) {

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721AdminChanged)
				if err := _DDC721.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) ParseAdminChanged(log types.Log) (*DDC721AdminChanged, error) {
	event := new(DDC721AdminChanged)
	if err := _DDC721.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DDC721 contract.
type DDC721ApprovalIterator struct {
	Event *DDC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Approval represents a Approval event raised by the DDC721 contract.
type DDC721Approval struct {
	Owner    common.Address
	Approved common.Address
	DdcId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, ddcId []*big.Int) (*DDC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ApprovalIterator{contract: _DDC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DDC721Approval, owner []common.Address, approved []common.Address, ddcId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Approval)
				if err := _DDC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) ParseApproval(log types.Log) (*DDC721Approval, error) {
	event := new(DDC721Approval)
	if err := _DDC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DDC721 contract.
type DDC721ApprovalForAllIterator struct {
	Event *DDC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721ApprovalForAll represents a ApprovalForAll event raised by the DDC721 contract.
type DDC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DDC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ApprovalForAllIterator{contract: _DDC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DDC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721ApprovalForAll)
				if err := _DDC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) ParseApprovalForAll(log types.Log) (*DDC721ApprovalForAll, error) {
	event := new(DDC721ApprovalForAll)
	if err := _DDC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721BeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the DDC721 contract.
type DDC721BeaconUpgradedIterator struct {
	Event *DDC721BeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721BeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721BeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721BeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721BeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721BeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721BeaconUpgraded represents a BeaconUpgraded event raised by the DDC721 contract.
type DDC721BeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*DDC721BeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &DDC721BeaconUpgradedIterator{contract: _DDC721.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *DDC721BeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721BeaconUpgraded)
				if err := _DDC721.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) ParseBeaconUpgraded(log types.Log) (*DDC721BeaconUpgraded, error) {
	event := new(DDC721BeaconUpgraded)
	if err := _DDC721.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721EnterBlacklistIterator is returned from FilterEnterBlacklist and is used to iterate over the raw logs and unpacked data for EnterBlacklist events raised by the DDC721 contract.
type DDC721EnterBlacklistIterator struct {
	Event *DDC721EnterBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721EnterBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721EnterBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721EnterBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721EnterBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721EnterBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721EnterBlacklist represents a EnterBlacklist event raised by the DDC721 contract.
type DDC721EnterBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnterBlacklist is a free log retrieval operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) FilterEnterBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC721EnterBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC721EnterBlacklistIterator{contract: _DDC721.contract, event: "EnterBlacklist", logs: logs, sub: sub}, nil
}

// WatchEnterBlacklist is a free log subscription operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) WatchEnterBlacklist(opts *bind.WatchOpts, sink chan<- *DDC721EnterBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721EnterBlacklist)
				if err := _DDC721.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnterBlacklist is a log parse operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) ParseEnterBlacklist(log types.Log) (*DDC721EnterBlacklist, error) {
	event := new(DDC721EnterBlacklist)
	if err := _DDC721.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ExitBlacklistIterator is returned from FilterExitBlacklist and is used to iterate over the raw logs and unpacked data for ExitBlacklist events raised by the DDC721 contract.
type DDC721ExitBlacklistIterator struct {
	Event *DDC721ExitBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ExitBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721ExitBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721ExitBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ExitBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ExitBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721ExitBlacklist represents a ExitBlacklist event raised by the DDC721 contract.
type DDC721ExitBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExitBlacklist is a free log retrieval operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) FilterExitBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC721ExitBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ExitBlacklistIterator{contract: _DDC721.contract, event: "ExitBlacklist", logs: logs, sub: sub}, nil
}

// WatchExitBlacklist is a free log subscription operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) WatchExitBlacklist(opts *bind.WatchOpts, sink chan<- *DDC721ExitBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721ExitBlacklist)
				if err := _DDC721.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExitBlacklist is a log parse operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) ParseExitBlacklist(log types.Log) (*DDC721ExitBlacklist, error) {
	event := new(DDC721ExitBlacklist)
	if err := _DDC721.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the DDC721 contract.
type DDC721OwnershipTransferredIterator struct {
	Event *DDC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721OwnershipTransferred represents a OwnershipTransferred event raised by the DDC721 contract.
type DDC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*DDC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &DDC721OwnershipTransferredIterator{contract: _DDC721.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DDC721OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721OwnershipTransferred)
				if err := _DDC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) ParseOwnershipTransferred(log types.Log) (*DDC721OwnershipTransferred, error) {
	event := new(DDC721OwnershipTransferred)
	if err := _DDC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721SetNameAndSymbolIterator is returned from FilterSetNameAndSymbol and is used to iterate over the raw logs and unpacked data for SetNameAndSymbol events raised by the DDC721 contract.
type DDC721SetNameAndSymbolIterator struct {
	Event *DDC721SetNameAndSymbol // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721SetNameAndSymbolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721SetNameAndSymbol)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721SetNameAndSymbol)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721SetNameAndSymbolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721SetNameAndSymbolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721SetNameAndSymbol represents a SetNameAndSymbol event raised by the DDC721 contract.
type DDC721SetNameAndSymbol struct {
	Name   string
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetNameAndSymbol is a free log retrieval operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) FilterSetNameAndSymbol(opts *bind.FilterOpts) (*DDC721SetNameAndSymbolIterator, error) {

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "SetNameAndSymbol")
	if err != nil {
		return nil, err
	}
	return &DDC721SetNameAndSymbolIterator{contract: _DDC721.contract, event: "SetNameAndSymbol", logs: logs, sub: sub}, nil
}

// WatchSetNameAndSymbol is a free log subscription operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) WatchSetNameAndSymbol(opts *bind.WatchOpts, sink chan<- *DDC721SetNameAndSymbol) (event.Subscription, error) {

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "SetNameAndSymbol")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721SetNameAndSymbol)
				if err := _DDC721.contract.UnpackLog(event, "SetNameAndSymbol", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetNameAndSymbol is a log parse operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) ParseSetNameAndSymbol(log types.Log) (*DDC721SetNameAndSymbol, error) {
	event := new(DDC721SetNameAndSymbol)
	if err := _DDC721.contract.UnpackLog(event, "SetNameAndSymbol", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721SetURIIterator is returned from FilterSetURI and is used to iterate over the raw logs and unpacked data for SetURI events raised by the DDC721 contract.
type DDC721SetURIIterator struct {
	Event *DDC721SetURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721SetURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721SetURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721SetURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721SetURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721SetURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721SetURI represents a SetURI event raised by the DDC721 contract.
type DDC721SetURI struct {
	DdcId  *big.Int
	DdcURI string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetURI is a free log retrieval operation binding the contract event 0xee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e46.
//
// Solidity: event SetURI(uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) FilterSetURI(opts *bind.FilterOpts, ddcId []*big.Int) (*DDC721SetURIIterator, error) {

	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "SetURI", ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC721SetURIIterator{contract: _DDC721.contract, event: "SetURI", logs: logs, sub: sub}, nil
}

// WatchSetURI is a free log subscription operation binding the contract event 0xee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e46.
//
// Solidity: event SetURI(uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) WatchSetURI(opts *bind.WatchOpts, sink chan<- *DDC721SetURI, ddcId []*big.Int) (event.Subscription, error) {

	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "SetURI", ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721SetURI)
				if err := _DDC721.contract.UnpackLog(event, "SetURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetURI is a log parse operation binding the contract event 0xee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e46.
//
// Solidity: event SetURI(uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) ParseSetURI(log types.Log) (*DDC721SetURI, error) {
	event := new(DDC721SetURI)
	if err := _DDC721.contract.UnpackLog(event, "SetURI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DDC721 contract.
type DDC721TransferIterator struct {
	Event *DDC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Transfer represents a Transfer event raised by the DDC721 contract.
type DDC721Transfer struct {
	From  common.Address
	To    common.Address
	DdcId *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, ddcId []*big.Int) (*DDC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC721TransferIterator{contract: _DDC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DDC721Transfer, from []common.Address, to []common.Address, ddcId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Transfer)
				if err := _DDC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) ParseTransfer(log types.Log) (*DDC721Transfer, error) {
	event := new(DDC721Transfer)
	if err := _DDC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721UpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the DDC721 contract.
type DDC721UpgradedIterator struct {
	Event *DDC721Upgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721UpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Upgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Upgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721UpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721UpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Upgraded represents a Upgraded event raised by the DDC721 contract.
type DDC721Upgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DDC721UpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DDC721UpgradedIterator{contract: _DDC721.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DDC721Upgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Upgraded)
				if err := _DDC721.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) ParseUpgraded(log types.Log) (*DDC721Upgraded, error) {
	event := new(DDC721Upgraded)
	if err := _DDC721.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
